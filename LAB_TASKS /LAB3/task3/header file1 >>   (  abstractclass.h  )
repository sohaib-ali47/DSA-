#pragma once
#include <iostream>
using namespace std;

template <typename T>
class List {
protected:
    T* arr;
    int currentindex;
    int maxsize;

public:
    // Constructor with default arguments
    List(int max = 10, int current = 0) : maxsize(max), currentindex(current) {
        arr = new T[maxsize];
    }

    // Destructor
    virtual ~List() {
        delete[] arr;
    }

    // Pure virtual functions (must be implemented by derived classes)
    virtual void addElementAtFirstIndex(T value) = 0;
    virtual void addElementAtLastIndex(T value) = 0;
    virtual T removeElementFromEnd() = 0;
    virtual void removeElementFromStart() = 0;
    virtual void display() = 0;
};
