#pragma once
#include <iostream>
#include "Node.h"
using namespace std;

template <typename T>
class CircularLinkedList {
private:
    Node<T>* head;
    Node<T>* tail;

public:
    CircularLinkedList() {
        head = nullptr;
        tail = nullptr;
    }

    void createList(int total = 41) {
        for (int i = 1; i <= total; i++) {
            insert(i);
        }
    }

    void insert(T value) {
        Node<T>* newNode = new Node<T>(value);
        if (head == nullptr) {
            head = newNode;
            tail = newNode;
            tail->next = head;
        }
        else {
            tail->next = newNode;
            tail = newNode;
            tail->next = head;
        }
    }

    T solveJosephus(int start, int step) {
        if (head == nullptr) {
            return T();
        }

        Node<T>* temp = head;
        Node<T>* prev = tail;

        while (temp->data != start) {
            prev = temp;
            temp = temp->next;
        }

        while (temp->next != temp) {
            for (int i = 1; i < step; i++) {
                prev = temp;
                temp = temp->next;
            }

            prev->next = temp->next;

            if (temp == head) {
                head = temp->next;
            }

            if (temp == tail) {
                tail = prev;
            }

            delete temp;
            temp = prev->next;
        }

        T survivor = temp->data;
        delete temp;
        head = nullptr;
        tail = nullptr;
        return survivor;
    }

    void clearList() {
        if (head == nullptr) return;

        Node<T>* current = head;
        Node<T>* nextNode;

        do {
            nextNode = current->next;
            delete current;
            current = nextNode;
        } while (current != head);

        head = nullptr;
        tail = nullptr;
    }

    ~CircularLinkedList() {
        clearList();
    }
};
